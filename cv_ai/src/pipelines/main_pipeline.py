from sentence_transformers import SentenceTransformer, util
import sys
import os
from src.config import config
from cv_ai.src.ner import NERModel

class ResumeVacancyMatcher:
    def __init__(self, model):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º NER –º–æ–¥–µ–ª—å
        self.ner_pipeline = model.pipeline

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        self.embedder = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.category_weights = {
            "POSITION": 0.4,    # –î–æ–ª–∂–Ω–æ—Å—Ç—å - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
            "SKILL": 0.3,       # –ù–∞–≤—ã–∫–∏
            "LOCATION": 0.15,   # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            "COMPANY": 0.05,    # –ö–æ–º–ø–∞–Ω–∏—è
            "EDUCATION": 0.05,  # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            "EXPERIENCE": 0.05  # –û–ø—ã—Ç
        }
    
    def match(self, resume_text, vacancy_text):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏—é"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        resume_entities = self.__extract_entities(resume_text)
        vacancy_entities = self.__extract_entities(vacancy_text)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_scores = self.__compare_by_category(resume_entities, vacancy_entities)
        
        # –û–±—â–∏–π score (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞)
        total_score = 0
        for category, score in category_scores.items():
            weight = self.category_weights.get(category, 0.01)
            total_score += score * weight
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 0-100
        final_score = min(100, max(0, total_score * 100))
        
        return {
            "score": round(final_score, 1),
            "category_scores": category_scores,
            "resume_entities": resume_entities,
            "vacancy_entities": vacancy_entities
        }
    
    def __extract_entities(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        return self.ner_pipeline(text)
    
    def __compare_by_category(self, resume_entities, vacancy_entities):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        category_scores = {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        resume_by_cat = self.__group_by_category(resume_entities)
        vacancy_by_cat = self.__group_by_category(vacancy_entities)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        all_categories = set(resume_by_cat.keys()) | set(vacancy_by_cat.keys())
        
        for category in all_categories:
            resume_items = resume_by_cat.get(category, [])
            vacancy_items = vacancy_by_cat.get(category, [])
            
            if resume_items and vacancy_items:
                # –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º
                resume_emb = self.embedder.encode([e['word'] for e in resume_items])
                vacancy_emb = self.embedder.encode([e['word'] for e in vacancy_items])
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
                similarity = util.cos_sim(resume_emb, vacancy_emb).mean().item()
                category_scores[category] = similarity
            else:
                category_scores[category] = 0.0
        
        return category_scores
    
    def __group_by_category(self, entities):
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        grouped = {}
        for entity in entities:
            category = entity['entity_group']
            if category not in grouped:
                grouped[category] = []
            grouped[category].append(entity)
        return grouped

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
model = NERModel()

matcher = ResumeVacancyMatcher(model=model)

# –†–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏—è
resume_text = """
–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 5 –ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.
–†–∞–±–æ—Ç–∞–ª –≤ –Ø–Ω–¥–µ–∫—Å–µ —Å Django –∏ Flask. 
–ü—Ä–æ–∂–∏–≤–∞–µ—Ç –≤ –ú–æ—Å–∫–≤–µ. –í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ú–ì–£.
"""

vacancy_text = """
–ò—â–µ–º Senior Python developer —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –æ—Ç 3 –ª–µ—Ç.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Django, Flask, PostgreSQL. 
–†–∞–±–æ—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ. –û—Ñ–∏—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞.
"""

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
result = matcher.match(resume_text, vacancy_text)
def print_match_details(result):
    """–ö—Ä–∞—Å–∏–≤–∞—è –ø–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("üéØ Match Results")
    print(f"Overall Score: {result['score']}%")
    print("\nüìä Category Scores:")
    for category, score in result['category_scores'].items():
        print(f"  {category:12}: {score:.3f}")
    
    print("\nüìù Resume Entities:")
    for entity in result['resume_entities']:
        print(f"  {entity['word']:15} ‚Üí {entity['entity_group']}")
    
    print("\nüìã Vacancy Entities:")
    for entity in result['vacancy_entities']:
        print(f"  {entity['word']:15} ‚Üí {entity['entity_group']}")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
print_match_details(result)
