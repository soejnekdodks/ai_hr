import zipfile
from io import BytesIO
from datetime import timedelta
import os

from aiogram import Router
from aiogram.types import Message, InputFile
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import Depends

from app.config import config
from app.database.core import get_async_session
from app.database.query.candidate import create as create_candidate
from app.database.query.interview import create as create_interview
from app.parsing import document_to_text
from cv_ai.cv_analyze import ResumeVacancyAnalyze
from cv_ai.questions_gen import QuestionsGenerator
from app.database.schema import Candidate

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∞
MAX_ZIP_SIZE = 50 * 1024 * 1024  # 50MB
MAX_RESUMES_IN_ZIP = 10
MAX_RESUME_SIZE = 10 * 1024 * 1024  # 10MB

router = Router()

from aiogram import Bot
bot = Bot(config.TG_TOKEN)

def create_mock():
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock URL"""
    return "https://example.com/interview/mock-id"

async def analyze_resume(
    message: Message,
    resume_bytes: bytes,
    vacancy_text: str,
    file_format: str,
    session: AsyncSession,
):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –æ—Ç–±–æ—Ä)."""
    cv_analyze = ResumeVacancyAnalyze()
    resume_text = document_to_text(resume_bytes, file_format)

    match_percentage = cv_analyze.analyze_resume_vs_vacancy(resume_text, vacancy_text)
    url = create_mock()

    if match_percentage > 70.0:
        # --- –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ---
        candidate: Candidate = await create_candidate(session=session, cv=resume_bytes)

        # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã ---
        qg = QuestionsGenerator()
        questions = qg.generate_questions(
            resume_text=resume_text,
            vacancy_text=vacancy_text,
            num_questions=config.NUMS_OF_QUESTIONS,
        )

        # --- –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–≤—å—é ---
        interview_id = await create_interview(
            session=session,
            candidate_id=candidate.id,
            questions=questions,
            expiration_time=timedelta(days=7),
        )

        # –ü–æ–ª—É—á–∞–µ–º chat_id HR-–∞
        hr_chat_id = message.chat.id
        
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ HR ---
        file_info = get_file_info(resume_bytes, file_format)
        caption = (
            "üéØ –ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–±–æ—Ä!\n\n"
            f"üÜî ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate.id}\n"
            f"‚ö°Ô∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π: {match_percentage:.1f}%\n"
            f"üìã –ò–Ω—Ç–µ—Ä–≤—å—é ID: {interview_id}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {url}\n"
            f"üìÑ –§–æ—Ä–º–∞—Ç: {file_info['format']}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {format_file_size(file_info['size_bytes'])}"
        )

        cv_file = BytesIO(candidate.cv)
        filename = f"resume_candidate_{candidate.id}{file_info['extension']}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ HR-—É
        await bot.send_document(
            chat_id=hr_chat_id,
            document=InputFile(cv_file, filename=filename),
            caption=caption,
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –†–µ–∑—é–º–µ –ø—Ä–∏–Ω—è—Ç–æ! –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match_percentage:.1f}%. "
            f"HR –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )
    else:
        await message.answer(
            f"‚ùå –†–µ–∑—é–º–µ {file_format.upper()} –Ω–µ –ø—Ä–æ—à–ª–æ –æ—Ç–±–æ—Ä "
            f"(—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {match_percentage:.1f}%)."
        )


def get_file_info(file_bytes: bytes, original_format: str) -> dict:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º"""
    size_bytes = len(file_bytes)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-type –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º —Ñ–∞–π–ª–æ–≤
    mime_type, extension = detect_file_type(file_bytes)
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if mime_type == "application/octet-stream":
        mime_type = f"application/{original_format}"
        extension = f".{original_format}"

    return {
        "size_bytes": size_bytes,
        "mime_type": mime_type,
        "format": original_format.upper(),
        "extension": extension,
    }


def detect_file_type(file_bytes: bytes) -> tuple[str, str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º"""
    if len(file_bytes) < 4:
        return "application/octet-stream", ".bin"
    
    # PDF: %PDF-
    if file_bytes.startswith(b'%PDF-'):
        return "application/pdf", ".pdf"
    
    # ZIP-based formats (DOCX, XLSX, PPTX, etc.)
    if file_bytes.startswith(b'PK'):
        return "application/zip", ".zip"
    
    # Microsoft DOC (OLE Compound Document)
    if file_bytes.startswith(b'\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1'):
        return "application/msword", ".doc"
    
    # RTF: {\rtf
    if file_bytes.startswith(b'{\\rtf'):
        return "application/rtf", ".rtf"
    
    # Plain text (UTF-8 BOM)
    if file_bytes.startswith(b'\xEF\xBB\xBF'):
        return "text/plain", ".txt"
    
    # Plain text (UTF-16)
    if file_bytes.startswith(b'\xFF\xFE') or file_bytes.startswith(b'\xFE\xFF'):
        return "text/plain", ".txt"
    
    # HTML
    if file_bytes.startswith(b'<!DOCTYPE') or file_bytes.startswith(b'<html'):
        return "text/html", ".html"
    
    # RAR
    if file_bytes.startswith(b'Rar!'):
        return "application/vnd.rar", ".rar"
    
    # 7ZIP
    if file_bytes.startswith(b'7z'):
        return "application/x-7z-compressed", ".7z"
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return "application/octet-stream", ".bin"


def format_file_size(size_bytes: int) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if size_bytes == 0:
        return "0B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    size = size_bytes
    while size >= 1024 and i < len(size_names) - 1:
        size /= 1024.0
        i += 1
    
    return f"{size:.1f} {size_names[i]}"


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
def get_extension_by_format(file_format: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç–∞"""
    extensions = {
        'pdf': '.pdf',
        'docx': '.docx',
        'doc': '.doc',
        'txt': '.txt',
        'rtf': '.rtf',
        'html': '.html',
        'zip': '.zip',
        'rar': '.rar',
    }
    return extensions.get(file_format.lower(), f'.{file_format}')