import zipfile
from io import BytesIO
from datetime import timedelta

from aiogram import Router
from aiogram.types import Message, InputFile
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import Depends

import magic

from app.bot.start_bot import bot
from app.config import config
from app.database.core import get_async_session
from app.database.query.candidate import create as create_candidate
from app.database.query.interview import create as create_interview
from app.parsing import document_to_text
from cv_ai.cv_analyze import ResumeVacancyAnalyze
from cv_ai.questions_gen import QuestionsGenerator
from app.database.schema import Candidate


router = Router()


async def analyze_resume(
    message: Message,
    resume_bytes: bytes,
    vacancy_bytes: bytes,
    file_format: str,
    session: AsyncSession,
):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –æ—Ç–±–æ—Ä)."""

    cv_analyze = ResumeVacancyAnalyze()
    resume_text = document_to_text(resume_bytes, file_format)
    vacancy_text = document_to_text(vacancy_bytes, file_format)

    match_percentage = cv_analyze.analyze_resume_vs_vacancy(resume_text, vacancy_text)
    url = create_mock()

    if match_percentage > 70.0:
        # --- –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ---
        candidate: Candidate = await create_candidate(session=session, cv=resume_bytes)

        # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã ---
        qg = QuestionsGenerator()
        questions = qg.generate_questions(
            resume_text=resume_text,
            vacancy_text=vacancy_text,
            num_questions=config.NUMS_OF_QUESTIONS,
        )

        # --- –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–≤—å—é ---
        interview_id = await create_interview(
            session=session,
            candidate_id=candidate.id,
            questions=questions,
            expiration_time=timedelta(days=7),
        )

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ HR ---
        file_info = get_file_info(resume_bytes, file_format)
        caption = (
            "üéØ –ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–±–æ—Ä!\n\n"
            f"üÜî ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate.id}\n"
            f"‚ö°Ô∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π: {match_percentage:.1f}%\n"
            f"üìã –ò–Ω—Ç–µ—Ä–≤—å—é ID: {interview_id}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {url}"
        )

        cv_file = BytesIO(candidate.cv)
        filename = f"resume_candidate_{candidate.id}{file_info['extension']}"

        await bot.send_document(
            chat_id=message.chat.id,
            document=InputFile(cv_file, filename=filename),
            caption=caption,
        )
    else:
        await message.answer(
            f"‚ùå –†–µ–∑—é–º–µ {file_format.upper()} –Ω–µ –ø—Ä–æ—à–ª–æ –æ—Ç–±–æ—Ä "
            f"(—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {match_percentage:.1f}%)."
        )


# ---------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------

def get_file_info(file_bytes: bytes, original_format: str) -> dict:
    size_bytes = len(file_bytes)
    try:
        mime = magic.Magic(mime=True)
        mime_type = mime.from_buffer(file_bytes[:2048])
    except Exception:
        mime_type = f"application/{original_format}"

    mime_to_extension = {
        "application/pdf": ".pdf",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ".docx",
        "application/msword": ".doc",
        "text/plain": ".txt",
    }
    extension = mime_to_extension.get(mime_type, f".{original_format}")

    return {
        "size_bytes": size_bytes,
        "mime_type": mime_type,
        "format": original_format.upper(),
        "extension": extension,
    }


def create_mock() -> str:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    return "https://example.com/interview/mock"
