from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message
import zipfile
from io import BytesIO

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
MAX_VACANCY_SIZE = 5 * 1024 * 1024  # 5MB
MAX_ZIP_SIZE = 10 * 1024 * 1024  # 10MB
MAX_RESUME_SIZE = 2 * 1024 * 1024  # 2MB
MAX_RESUMES_IN_ZIP = 10

@router.message(Command("start", "help"))
async def cmd_start_help(message: Message):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —Ä–µ–∑—é–º–µ!</b>\n\n"
        "üìã <b>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:</b>\n"
        "1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>.txt</code> –∏–ª–∏ <code>.pdf</code>\n"
        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ <code>.zip</code> –∞—Ä—Ö–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ "
        "(—Ñ–∞–π–ª—ã <code>.txt</code> –∏–ª–∏ <code>.pdf</code> –≤–Ω—É—Ç—Ä–∏)\n"
        "3. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ —Å–æ–æ–±—â–∏—Ç, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç\n\n"
        "‚ö° <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –í–∞–∫–∞–Ω—Å–∏—è: –¥–æ 5MB\n"
        "‚Ä¢ –ê—Ä—Ö–∏–≤: –¥–æ 10MB\n"
        "‚Ä¢ –†–µ–∑—é–º–µ –≤ –∞—Ä—Ö–∏–≤–µ: –¥–æ 2MB –∫–∞–∂–¥–æ–µ\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—é–º–µ –≤ –∞—Ä—Ö–∏–≤–µ\n\n"
        "‚ö° <i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –∏ –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ!</i>"
    )
    await message.answer(welcome_text, parse_mode="HTML")


@router.message(
    F.document
    & (F.document.file_name.endswith(".txt") | F.document.file_name.endswith(".pdf"))
)
async def handle_vacancy_file(message: Message):
    file_size = message.document.file_size
    
    if file_size > MAX_VACANCY_SIZE:
        await message.answer(
            f"‚ùå <b>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–µ–≤—ã—à–µ–Ω!</b>\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {file_size / 1024 / 1024:.1f}MB\n"
            f"üìè <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:</b> {MAX_VACANCY_SIZE / 1024 / 1024}MB\n\n"
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            parse_mode="HTML"
        )
        return
    
    file_id = message.document.file_id
    file_name = message.document.file_name

    user_data = user_file_storage.get(message.from_user.id, {})
    user_data["vacancy_file"] = {"id": file_id, "name": file_name, "size": file_size}
    user_file_storage[message.from_user.id] = user_data

    await message.answer(
        f"‚úÖ <b>–í–∞–∫–∞–Ω—Å–∏—è</b> <code>{file_name}</code> <b>–ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
        f"üìä <b>–†–∞–∑–º–µ—Ä:</b> {file_size / 1024 / 1024:.1f}MB\n\n"
        "üì¶ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ.",
        parse_mode="HTML",
    )


@router.message(F.document & F.document.file_name.endswith(".zip"))
async def handle_resume_zip(message: Message):
    user_id = message.from_user.id
    file_name = message.document.file_name
    file_size = message.document.file_size
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—Ä—Ö–∏–≤–∞
    if file_size > MAX_ZIP_SIZE:
        await message.answer(
            f"‚ùå <b>–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –ø—Ä–µ–≤—ã—à–µ–Ω!</b>\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {file_size / 1024 / 1024:.1f}MB\n"
            f"üìè <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:</b> {MAX_ZIP_SIZE / 1024 / 1024}MB\n\n"
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            parse_mode="HTML"
        )
        return

    user_data = user_file_storage.get(user_id, {})
    if "vacancy_file" not in user_data:
        await message.answer(
            "‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π!</b>\n"
            "üìÑ –§–æ—Ä–º–∞—Ç—ã: <code>.txt</code> –∏–ª–∏ <code>.pdf</code>",
            parse_mode="HTML",
        )
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤
    try:
        file = await message.bot.get_file(message.document.file_id)
        downloaded = await message.bot.download_file(file.file_path)
        
        with zipfile.ZipFile(BytesIO(downloaded.read())) as archive:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            resume_files = [name for name in archive.namelist() 
                          if name.lower().endswith(('.pdf', '.txt'))]
            
            if len(resume_files) > MAX_RESUMES_IN_ZIP:
                await message.answer(
                    f"‚ùå <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ –≤ –∞—Ä—Ö–∏–≤–µ!</b>\n\n"
                    f"üìä <b>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—é–º–µ:</b> {len(resume_files)}\n"
                    f"üìè <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ:</b> {MAX_RESUMES_IN_ZIP}\n\n"
                    "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ –≤ –∞—Ä—Ö–∏–≤–µ.",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—é–º–µ
            oversized_files = []
            for resume_name in resume_files:
                file_info = archive.getinfo(resume_name)
                if file_info.file_size > MAX_RESUME_SIZE:
                    oversized_files.append(
                        f"{resume_name} ({file_info.file_size / 1024 / 1024:.1f}MB)"
                    )
            
            if oversized_files:
                oversized_list = "\n".join([f"‚Ä¢ {file}" for file in oversized_files])
                await message.answer(
                    f"‚ùå <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∑—é–º–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä!</b>\n\n"
                    f"üìè <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—é–º–µ:</b> {MAX_RESUME_SIZE / 1024 / 1024}MB\n\n"
                    f"üìé <b>–§–∞–π–ª—ã —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º:</b>\n{oversized_list}\n\n"
                    "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —ç—Ç–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="HTML"
                )
                return
    
    except zipfile.BadZipFile:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ZIP-–∞—Ä—Ö–∏–≤!</b>\n\n"
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—Ä—Ö–∏–≤ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        return
    except Exception as e:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞!</b>\n\n"
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        return

    user_data["resume_zip"] = {"id": message.document.file_id, "name": file_name, "size": file_size}
    user_file_storage[user_id] = user_data

    await message.answer(
        f"‚úÖ <b>–ê—Ä—Ö–∏–≤</b> <code>{file_name}</code> <b>—Å —Ä–µ–∑—é–º–µ –ø—Ä–∏–Ω—è—Ç!</b>\n"
        f"üìä <b>–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞:</b> {file_size / 1024 / 1024:.1f}MB\n"
        f"üìÑ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ:</b> {len(resume_files)}\n"
        f"üíº <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> <code>{user_data['vacancy_file']['name']}</code>\n\n"
        "üéâ <b>–í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>",
        parse_mode="HTML",
    )


@router.message(F.document)
async def handle_unknown_document(message: Message):
    file_name = message.document.file_name
    await message.answer(
        f"‚ùå <b>–§–∞–π–ª</b> <code>{file_name}</code> <b>–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç</b>\n\n"
        "üìé <b>–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>\n"
        "‚Ä¢ –§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: <code>.txt</code> –∏–ª–∏ <code>.pdf</code>\n"
        "‚Ä¢ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ: <code>.zip</code>",
        parse_mode="HTML",
    )


@router.message(F.text)
async def handle_text(message: Message):
    await message.answer(
        "üìé <b>–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏</b>\n\n"
        "üìÑ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ:</b>\n"
        "‚Ä¢ –§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ (<code>.txt</code> –∏–ª–∏ <code>.pdf</code>)\n"
        "‚Ä¢ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ (<code>.zip</code>)\n\n"
        "‚ö° <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –í–∞–∫–∞–Ω—Å–∏—è: –¥–æ 5MB\n"
        "‚Ä¢ –ê—Ä—Ö–∏–≤: –¥–æ 10MB\n"
        "‚Ä¢ –†–µ–∑—é–º–µ –≤ –∞—Ä—Ö–∏–≤–µ: –¥–æ 2MB –∫–∞–∂–¥–æ–µ\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—é–º–µ –≤ –∞—Ä—Ö–∏–≤–µ",
        parse_mode="HTML",
    )


user_file_storage = {}
