from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message

router = Router()


@router.message(Command("start", "help"))
async def cmd_start_help(message: Message):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —Ä–µ–∑—é–º–µ!</b>\n\n"
        "üìã <b>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:</b>\n"
        "1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>.txt</code> –∏–ª–∏ <code>.pdf</code>\n"
        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ <code>.zip</code> –∞—Ä—Ö–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ "
        "(—Ñ–∞–π–ª—ã <code>.txt</code> –∏–ª–∏ <code>.pdf</code> –≤–Ω—É—Ç—Ä–∏)\n"
        "3. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ —Å–æ–æ–±—â–∏—Ç, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç\n\n"
        "‚ö° <i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –∏ –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ!</i>"
    )
    await message.answer(welcome_text, parse_mode="HTML")


@router.message(
    F.document
    & (F.document.file_name.endswith(".txt") | F.document.file_name.endswith(".pdf"))
)
async def handle_vacancy_file(message: Message):
    file_id = message.document.file_id
    file_name = message.document.file_name

    user_data = user_file_storage.get(message.from_user.id, {})
    user_data["vacancy_file"] = {"id": file_id, "name": file_name}
    user_file_storage[message.from_user.id] = user_data

    await message.answer(
        f"‚úÖ <b>–í–∞–∫–∞–Ω—Å–∏—è</b> <code>{file_name}</code> <b>–ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "üì¶ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ.",
        parse_mode="HTML",
    )


@router.message(F.document & F.document.file_name.endswith(".zip"))
async def handle_resume_zip(message: Message):
    user_id = message.from_user.id
    file_name = message.document.file_name

    user_data = user_file_storage.get(user_id, {})
    if "vacancy_file" not in user_data:
        await message.answer(
            "‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π!</b>\n"
            "üìÑ –§–æ—Ä–º–∞—Ç—ã: <code>.txt</code> –∏–ª–∏ <code>.pdf</code>",
            parse_mode="HTML",
        )
        return

    user_data["resume_zip"] = {"id": message.document.file_id, "name": file_name}
    user_file_storage[user_id] = user_data

    await message.answer(
        f"‚úÖ <b>–ê—Ä—Ö–∏–≤</b> <code>{file_name}</code> <b>—Å —Ä–µ–∑—é–º–µ –ø—Ä–∏–Ω—è—Ç!</b>\n"
        f"üíº <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> <code>{user_data['vacancy_file']['name']}</code>\n\n"
        "üéâ <b>–í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>",
        parse_mode="HTML",
    )


@router.message(F.document)
async def handle_unknown_document(message: Message):
    file_name = message.document.file_name
    await message.answer(
        f"‚ùå <b>–§–∞–π–ª</b> <code>{file_name}</code> <b>–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç</b>\n\n"
        "üìé <b>–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>\n"
        "‚Ä¢ –§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: <code>.txt</code> –∏–ª–∏ <code>.pdf</code>\n"
        "‚Ä¢ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ: <code>.zip</code>",
        parse_mode="HTML",
    )


@router.message(F.text)
async def handle_text(message: Message):
    await message.answer(
        "üìé <b>–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏</b>\n\n"
        "üìÑ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ:</b>\n"
        "‚Ä¢ –§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ (<code>.txt</code> –∏–ª–∏ <code>.pdf</code>)\n"
        "‚Ä¢ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ (<code>.zip</code>)",
        parse_mode="HTML",
    )


user_file_storage = {}
