from io import BytesIO
import os
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
import zipfile

import pdfplumber
from io import BytesIO

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()



async def extract_text_from_pdf(bot, file_id):
    file = await bot.get_file(file_id)
    downloaded = await bot.download_file(file.file_path)
    
    text = ""
    with pdfplumber.open(BytesIO(downloaded.read())) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    return text.strip()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start –∏ /help
@router.message(Command("start", "help"))
async def cmd_start_help(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —Ä–µ–∑—é–º–µ!\n\n"
        "üìã **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**\n"
        "1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.txt` –∏–ª–∏ `.pdf`.\n"
        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ `.zip` –∞—Ä—Ö–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (—Ñ–∞–π–ª—ã `.txt` –∏–ª–∏ `.pdf` –≤–Ω—É—Ç—Ä–∏).\n"
        "3. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ —Å–æ–æ–±—â–∏—Ç, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.\n\n"
        "‚ö° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –∏ –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ!"
    )
    await message.answer(welcome_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
@router.message(F.document & (F.document.file_name.endswith('.txt') | F.document.file_name.endswith('.pdf')))
async def handle_vacancy_file(message: Message, bot: Bot):
    file_id = message.document.file_id
    file_name = message.document.file_name

    user_data = user_file_storage.get(message.from_user.id, {})
    
    if file_name.lower().endswith(".pdf"):
        text = await extract_text_from_pdf(bot, file_id)
    else:
        file = await bot.get_file(file_id)
        downloaded = await bot.download_file(file.file_path)
        text = downloaded.read().decode("utf-8")
    
    user_data['vacancy_file'] = {'id': file_id, 'name': file_name, 'text': text}
    user_file_storage[message.from_user.id] = user_data

    await message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è `{file_name}` –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ.")


@router.message(F.document & F.document.file_name.endswith('.zip'))
async def handle_resume_zip(message: Message, bot: Bot):
    hr_id = message.from_user.id
    file_name = message.document.file_name

    user_data = user_file_storage.get(hr_id, {})
    if 'vacancy_file' not in user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π (.txt –∏–ª–∏ .pdf)!")
        return

    user_data['resume_zip'] = {'id': message.document.file_id, 'name': file_name}
    user_file_storage[hr_id] = user_data

    await message.answer(
        f"‚úÖ –ê—Ä—Ö–∏–≤ `{file_name}` —Å —Ä–µ–∑—é–º–µ –ø—Ä–∏–Ω—è—Ç!\n"
        f"üíº –í–∞–∫–∞–Ω—Å–∏—è: `{user_data['vacancy_file']['name']}`\n"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–µ —Ç–µ—Ö, —á—Ç–æ –Ω—É–∂–Ω—ã)
@router.message(F.document)
async def handle_unknown_document(message: Message):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞."""
    file_name = message.document.file_name
    await message.answer(f"‚ùå –§–∞–π–ª `{file_name}` –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ù—É–∂–µ–Ω —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ (.txt/.pdf) –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ (.zip).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–æ –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–µ–º)
@router.message(F.text)
async def handle_text(message: Message):
    """
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç,
    –Ω–∞–ø–æ–º–∏–Ω–∞—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã.
    """
    await message.answer("üìé –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏ (.txt –∏–ª–∏ .pdf) –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—é–º–µ.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï)
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ FSMContext!
user_file_storage = {}

async def employee_divider(hr_id: str | int) -> bool:
    vacancy = user_file_storage[hr_id]["vacancy_file"]

    zip_file_id = user_file_storage[hr_id]["resume_zip"]["id"]
    file = await bot.get_file(zip_file_id)
    downloaded = await bot.download_file(file.file_path)
    with zipfile.ZipFile(BytesIO(downloaded.read())) as archive:
        for name in archive.namelist():
            if name.lower().endswith(".pdf"):
                with archive.open(name) as pdf_file:
                    with pdfplumber.open(pdf_file) as pdf:
                        pass
                        # TODO –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π uuid –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫ –Ω–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                        # –ù–∞–¥–æ –∑–∞–≤—Ç—Ä–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–¥ –ø–æ–±—ã—Å—Ç—Ä–æ–º—É
                        # + –° –Ω–µ–π—Ä–æ–Ω–∫–æ–π –≤—Å–µ –≤ –ø–æ–ª–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –í—Å—è –ª–æ–≥–∏–∫–∞ –≤ api. 
                        # –ü–µ—Ä–µ–¥–∞–µ—à—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∫–∞–π—Ñ—É–µ—à—å
                        # –û—Ç–±–æ—Ä >0.70-75


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–æ–Ω—Ñ–∏–≥ –∏ —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ handlers

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å)
storage = MemoryStorage()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token="")
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
dp.include_router(router)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞."""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ (–æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤)
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())
